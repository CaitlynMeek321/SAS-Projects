**********************************************;
/*NEDSS OOS Report Analysis*/
/*Today date=##/##/2025*/
/*Author: Caitlynn Meek*/
**********************************************;

**********************************************;
/*1. CHANGE: SNOWFLAKE USERNAME & PASSWORD*/ 
**********************************************;

libname snow odbc dsn=dhub user= "jane.doe@domain.gov"
password="{SAS003}58E705E9D6482FD75AB79C70D003385B7C21"
schema="IDDI_DHUB" ;

cas mySession sessopts=(caslib=casuser timeout=1800 locale="en_US");
%let snow=snow;
libname dat cas caslib="&dat"  datalimit=all;


**********************************************;
/*2. IMPORT: NEDSS ELR DATA*/
**********************************************;

data NEDSS_TEST;
set &snow..t_nedss_covid_lab_data;
lab_added_dt = datepart(lab_added_dt);
Birth_dt = datepart(birth_dt);
specimen_coll_dt = datepart(specimen_coll_dt);
where (RESULTED_TEST_CD in ('100157-7','95424-8', '96755-4', '95424-8', '94764-8', '96741-4', '96895-8', '96766-1', '98062-3', 'PLT2397')) or 
(RESULT_TEST_TYPE not in ('NULL') and RESULT_CATEGORY='Positive');
format lab_added_dt mmddyy10.;
format specimen_coll_dt mmddyy10.;
format birth_dt mmddyy10.;
run;

**********************************************;
/*3. CHANGE: MACROS DATE (i.e., FILTERDATE, QACUTOFFDATE)*/
**********************************************;

%let startdate=24MAR2025; 
%let enddate= 30MAR2025;

%let folder=MAR2025;
%let folder2=NEDSS_OOS_REPORT;
%let filenameout=MASTER_NEDSS_OOS_REPORT_03312025.xlsx ; *Change date here! ;
%let filenameout2=NEDSS_OOS_REPORT_03312025.xlsx; *Change date here! ;

**********************************************
/*4. IMPORT NEDSS ELR DATAMART WITH FILTER DATES*/
**********************************************;

LIBNAME oosnedss '/mnt/viya-share/data/lids-idps/eaidu-coronavirus/_content/Reports/OOS NEDSS Report/2024/DEC2024';

DATA oosnedss;
SET NEDSS_TEST;
WHERE (lab_added_dt>= "&startdate"d and lab_added_dt <="&enddate"d);
RUN;

**********************************************
/*5. IMPORT ZIPCODE LOOKUP DATABASE*/
**********************************************;
proc sql;
%if %sysfunc(exist(WORK.zipcodelu)) %then %do;
    drop table WORK.zipcodelu;
%end;
%if %sysfunc(exist(WORK.zipcodelu,VIEW)) %then %do;
    drop view WORK.zipcodelu;
%end;
quit;

OPTIONS VALIDVARNAME = V7;
FILENAME REFFILE DISK '/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/ZIPCODELOOKUP/zip_code_database.csv';

PROC IMPORT DATAFILE=REFFILE
	DBMS=CSV
	OUT=WORK.zipcodelu;
	GETNAMES=YES;
RUN;

PROC CONTENTS DATA=WORK.zipcodelu; RUN;

**********************************************
6. /*RENAME ALL VARIABLES*/
**********************************************;
DATA oosnedssnew1; 
SET oosnedss;
RENAME FIRST_NAME=PAT_NAME_FIRST;
RENAME LAST_NAME=PAT_NAME_LAST;
RENAME MIDDLE_NAME=PAT_NAME_MIDDLE;
RENAME CURRENT_SEX_CD=PAT_CURRENT_SEX_CD;
RENAME BIRTH_DT=PAT_DOB;
RENAME PATIENT_ETHNICITY=PAT_ETHNICITY;
RENAME PATIENT_RACE_CALC=PAT_RACE_CALC;
RENAME ADDRESS_ONE=PAT_ADDRESS_STREET_ONE;
RENAME ADDRESS_TWO=PAT_ADDRESS_STREET_TWO;
RENAME CITY=PAT_ADDRESS_CITY;
RENAME COUNTY_DESC=PAT_ADDRESS_COUNTY;
RENAME STATE=PAT_STATE;
RENAME ZIP_CODE=PAT_ZIP_CODE;
RENAME PHONE_NUMBER=PAT_PHONE_NUMBER;
RENAME Result_Test_Type=RESULT_TEST_TYPE;
RUN;

**********************************************
/*7. DEDUPLICATE REPEATING OBSERVATIONS*/ 
**********************************************;
DATA oosnedss1; 
SET oosnedssnew1;
PATIENT_FIRST_NAME=UPCASE(PAT_NAME_FIRST);
PATIENT_LAST_NAME=UPCASE(PAT_NAME_LAST);
PUT PATIENT_FIRST_NAME PATIENT_LAST_NAME;
RUN;

DATA oosnedss1a; 
SET oosnedss1;
IF PAT_DOB=. THEN DELETE;
FORMAT PAT_DOB mmddyy10.; 
RUN;

PROC SORT DATA=oosnedss1a
OUT=oosnedss1b; 
BY PAT_DOB PATIENT_FIRST_NAME PATIENT_LAST_NAME;
RUN;

PROC SORT DATA=oosnedss1b
OUT=oosnedss1c
NODUPKEY 
DUPOUT=doosnedss1c; 
BY _ALL_;
RUN;

DATA oosnedss1d; 
SET oosnedss1c;
SOUND_PATIENT_FIRST=SOUNDEX(PATIENT_FIRST_NAME);
SOUND_PATIENT_LAST=SOUNDEX(PATIENT_LAST_NAME);
PUT SOUND_PATIENT_FIRST SOUND_PATIENT_LAST;
RUN;

PROC SORT DATA=oosnedss1d
OUT=oosnedss1e
NODUPKEY
DUPOUT=doosnedss1e;
BY PAT_DOB SOUND_PATIENT_FIRST SOUND_PATIENT_LAST;
RUN;

**********************************************
/*8. CLEAN ZIP CODES & CREATE OOS VARIABLE (NUMERIC VALUE)*/
**********************************************;
DATA oosnedss2;
SET oosnedss1e;
PAT_ZIP_CODE_c=CATS(PAT_ZIP_CODE);
PAT_ZIP_CODE_cc=SUBSTR(PAT_ZIP_CODE_c, 1, 5);
PUT PAT_ZIP_CODE_cc;
RUN;

DATA oosnedss3;
SET oosnedss2;
iOOS=PAT_ZIP_CODE_cc;
iOOS=0; 
iOOS=1;
IF PAT_ZIP_CODE_cc in (79001 79002 79003 79005 79007 79008 79009 79010 79011 79012 79013 79014 79015 79016 79018 79019 79021 79022 79024 79025 79027 79029 79031 79032 79033 79034 79035 79036 79039 79040 79041 79042 79043 79044 79045 79046 79051 79052 79053 79054 79056 79057 79058 79059 79061 79062 79063 79064 79065 79066 79068 79070 79072 79073 79077 79078 79079 79080 79081 79082 79083 79084 79085 79086 79087 79088 79091 79092 79093 79094 79095 79096 79097 79098 79101 79102 79103 79104 79105 79106 79107 79108 79109 79110 79111 79114 79116 79117 79118 79119 79120 79121 79123 79124 79159 79163 79164 79165 79166 79167 79168 79170 79171 79172 79174 79175 79178 79180 79181 79182 79184 79185 79186 79187 79189 79201 79220 79221 79222 79226 79227 79229 79230 79231 79232 79233 79234 79235 79236 79237 79238 79239 79240 79241 79243 79244 79245 79250 79251 79255 79256 79257 79258 79259 79261 79311 79312 79313 79314 79316 79320 79322 79323 79324 79325 79326 79329 79330 79331 79336 79338 79339 79342 79343 79344 79345 79346 79347 79350 79351 79353 79355 79356 79357 79358 79359 79360 79363 79364 79366 79367 79369 79370 79371 79372 79373 79376 79377 79378 79379 79380 79381 79382 79383 79401 79402 79403 79404 79405 79406 79407 79408 79409 79410 79411 79412 79413 79414 79415 79416 79423 79424 79430 79452 79453 79457 79464 79490 79491 79493 79499 79713 79738)
THEN iOOS=0;
IF PAT_ZIP_CODE_cc in (75033 75001 75002 75006 75007 75008 75009 75010 75011 75013 75014 75015 75016 75017 75019 75020 75021 75022 75023 75024 75025 75026 75027 75028 75029 75030 75032 75034 75035 75037 75038 75039 75040 75041 75042 75043 75044 75045 75046 75047 75048 75049 75050 75051 75052 75053 75054 75056 75057 75058 75060 75061 75062 75063 75065 75067 75068 75069 75070 75071 75074 75075 75076 75077 75078 75080 75081 75082 75083 75085 75086 75087 75088 75089 75090 75091 75092 75093 75094 75097 75098 75099 75101 75102 75104 75105 75106 75109 75110 75114 75115 75116 75118 75119 75120 75121 75123 75125 75126 75132 75134 75135 75137 75138 75141 75142 75143 75144 75146 75147 75148 75149 75150 75151 75152 75153 75154 75155 75157 75158 75159 75160 75161 75164 75165 75166 75167 75168 75172 75173 75180 75181 75182 75185 75187 75189 75201 75202 75203 75204 75205 75206 75207 75208 75209 75210 75211 75212 75214 75215 75216 75217 75218 75219 75220 75221 75222 75223 75224 75225 75226 75227 75228 75229 75230 75231 75232 75233 75234 75235 75236 75237 75238 75239 75240 75241 75242 75243 75244 75245 75246 75247 75248 75249 75250 75251 75252 75253 75254 75258 75260 75261 75262 75263 75264 75265 75266 75267 75270 75275 75277 75283 75284 75285 75286 75287 75295 75301 75303 75310 75312 75313 75315 75320 75323 75326 75336 75339 75342 75346 75353 75354 75355 75356 75357 75358 75359 75360 75363 75364 75367 75368 75369 75370 75371 75372 75373 75374 75376 75378 75379 75380 75381 75382 75386 75387 75388 75389 75390 75391 75392 75393 75394 75395 75396 75397 75398 75401 75402 75403 75404 75407 75409 75413 75414 75418 75422 75423 75424 75428 75429 75438 75439 75442 75443 75446 75447 75449 75452 75453 75454 75458 75459 75474 75475 75476 75479 75485 75488 75489 75490 75491 75492 75495 75496 76001 76002 76003 76004 76005 76006 76007 76008 76009 76010 76011 76012 76013 76014 76015 76016 76017 76018 76019 76020 76021 76022 76023 76028 76031 76033 76034 76035 76036 76039 76040 76041 76043 76044 76048 76049 76050 76051 76052 76053 76054 76058 76059 76060 76061 76063 76064 76065 76066 76067 76068 76070 76071 76073 76077 76078 76082 76084 76085 76086 76087 76088 76092 76093 76094 76095 76096 76097 76098 76099 76101 76102 76103 76104 76105 76106 76107 76108 76109 76110 76111 76112 76113 76114 76115 76116 76117 76118 76119 76120 76121 76122 76123 76124 76126 76127 76129 76130 76131 76132 76133 76134 76135 76136 76137 76140 76147 76148 76150 76155 76161 76162 76163 76164 76177 76178 76179 76180 76181 76182 76185 76191 76192 76193 76195 76196 76197 76198 76199 76201 76202 76203 76204 76205 76206 76207 76208 76209 76210 76225 76226 76227 76228 76230 76233 76234 76238 76239 76240 76241 76244 76245 76246 76247 76248 76249 76250 76251 76252 76253 76255 76258 76259 76261 76262 76263 76264 76265 76266 76267 76268 76270 76271 76272 76273 76299 76301 76302 76305 76306 76307 76308 76309 76310 76311 76351 76352 76354 76357 76360 76363 76364 76365 76366 76367 76369 76370 76371 76372 76373 76374 76377 76379 76380 76384 76385 76388 76389 76401 76402 76424 76426 76427 76429 76430 76431 76432 76433 76435 76437 76439 76442 76443 76444 76445 76446 76448 76449 76450 76452 76453 76454 76455 76458 76459 76460 76461 76462 76463 76464 76465 76466 76467 76468 76469 76470 76471 76472 76474 76475 76476 76481 76483 76484 76485 76486 76487 76490 76491 76623 76626 76639 76641 76651 76670 76679 76681 76801 76802 76803 76804 76821 76823 76827 76828 76834 76845 76857 76861 76865 76873 76875 76878 76882 76884 76888 76890 79223 79224 79225 79227 79247 79248 79252 79501 79502 79503 79504 79505 79506 79508 79510 79512 79516 79517 79518 79519 79520 79521 79525 79526 79527 79528 79529 79530 79532 79533 79534 79535 79536 79537 79538 79539 79540 79541 79543 79544 79545 79546 79547 79548 79549 79550 79553 79556 79560 79561 79562 79563 79565 79566 79567 79601 79602 79603 79604 79605 79606 79607 79608 79697 79698 79699)
THEN iOOS=0;
IF PAT_ZIP_CODE_cc in (75103 75117 75124 75127 75140 75148 75156 75163 75169 75410 75411 75412 75415 75416 75417 75420 75421 75425 75426 75431 75432 75433 75434 75435 75436 75437 75440 75441 75444 75448 75450 75451 75455 75456 75457 75460 75461 75462 75468 75469 75470 75471 75472 75473 75477 75478 75480 75481 75482 75483 75486 75487 75493 75494 75497 75501 75503 75504 75505 75507 75550 75551 75554 75555 75556 75558 75559 75560 75561 75562 75563 75564 75565 75566 75567 75568 75569 75570 75571 75572 75573 75574 75599 75601 75602 75603 75604 75605 75606 75607 75608 75615 75630 75631 75633 75636 75637 75638 75639 75640 75641 75642 75643 75644 75645 75647 75650 75651 75652 75653 75654 75656 75657 75658 75659 75660 75661 75662 75663 75666 75667 75668 75669 75670 75671 75672 75680 75681 75682 75683 75684 75685 75686 75687 75688 75689 75691 75692 75693 75694 75701 75702 75703 75704 75705 75706 75707 75708 75709 75710 75711 75712 75713 75750 75751 75752 75754 75755 75756 75757 75758 75759 75760 75762 75763 75764 75765 75766 75770 75771 75772 75773 75778 75779 75780 75782 75783 75784 75785 75788 75789 75790 75791 75792 75797 75798 75799 75801 75802 75803 75832 75834 75835 75839 75844 75845 75847 75849 75851 75853 75856 75858 75861 75862 75865 75880 75882 75884 75886 75901 75902 75903 75904 75915 75925 75926 75928 75929 75930 75931 75932 75933 75934 75935 75936 75937 75938 75939 75941 75942 75943 75944 75946 75947 75948 75949 75951 75954 75956 75958 75959 75960 75961 75962 75963 75964 75965 75966 75968 75969 75972 75973 75974 75975 75976 75977 75978 75979 75980 75990 77326 77331 77332 77335 77350 77351 77358 77359 77360 77364 77371 77399 77612 77614 77615 77616 77624 77660 77664)
THEN iOOS=0;
IF PAT_ZIP_CODE_cc in
THEN iOOS=0;
IF PAT_ZIP_CODE_cc in (73301 73344 75831 75833 75838 75840 75846 75848 75850 75852 75855 75859 75860 76055 76436 76457 76501 76502 76503 76504 76505 76508 76511 76513 76518 76519 76520 76522 76523 76524 76525 76526 76527 76528 76530 76531 76533 76534 76537 76538 76539 76540 76541 76542 76543 76544 76545 76546 76547 76548 76549 76550 76552 76554 76555 76556 76557 76558 76559 76561 76564 76565 76566 76567 76569 76570 76571 76573 76574 76577 76578 76579 76596 76597 76598 76599 76621 76622 76624 76627 76628 76629 76630 76631 76632 76633 76634 76635 76636 76637 76638 76640 76642 76643 76644 76645 76648 76649 76650 76652 76653 76654 76655 76656 76657 76660 76661 76664 76665 76666 76667 76671 76673 76675 76676 76677 76678 76680 76682 76684 76685 76686 76687 76689 76690 76691 76692 76693 76701 76702 76703 76704 76705 76706 76707 76708 76710 76711 76712 76714 76715 76716 76795 76797 76798 76799 76824 76831 76832 76844 76853 76864 76870 76871 76877 76880 768857 7363 77426 77801 77802 77803 77805 77806 77807 77808 77830 77831 77833 77834 77835 77836 77837 77838 77839 77840 77841 77842 77843 77844 77845 77850 77852 77853 77855 77856 77857 77859 77861 77862 77863 77864 77865 77866 77867 77868 77869 77870 77871 77872 77873 77875 77876 77878 77879 77880 77881 77882 78602 78605 78606 78607 78608 78609 78610 78611 78612 78613 78615 78616 78617 78619 78620 78621 78622 78626 78627 78628 78630 78634 78635 78636 78639 78640 78641 78642 78643 78644 78645 78646 78648 78650 78651 78652 78653 78654 78655 78656 78657 78659 78660 78661 78662 78663 78664 78665 78666 78667 78669 78672 78673 78674 78676 78680 78681 78682 78683 78691 78701 78702 78703 78704 78705 78708 78709 78710 78711 78712 78713 78714 78715 78716 78717 78718 78719 78720 78721 78722 78723 78724 78725 78726 78727 78728 78729 78730 78731 78732 78733 78734 78735 78736 78737 78738 78739 78741 78742 78744 78745 78746 78747 78748 78749 78750 78751 78752 78753 78754 78755 78756 78757 78758 78759 78760 78761 78762 78763 78764 78765 78766 78767 78768 78769 78772 78773 78774 78778 78779 78780 78781 78783 78785 78786 78788 78789 78799 78932 78938 78940 78941 78942 78945 78946 78947 78948 78949 78952 78953 78954 78956 78957 78960 78961 78963)
THEN iOOS=0; 
IF PAT_ZIP_CODE_cc in (76883 77901 77902 77903 77904 77905 77951 77954 77957 77960 77961 77962 77963 77964 77967 77968 77969 77970 77971 77972 77973 77974 77975 77976 77977 77978 77979 77982 77983 77984 77985 77986 77987 77988 77989 77991 77993 77994 77995 78001 78002 78003 78004 78005 78006 78008 78009 78010 78011 78012 78013 78014 78015 78016 78017 78019 78021 78023 78024 78025 78026 78027 78028 78029 78039 78050 78052 78053 78054 78055 78056 78057 78058 78059 78061 78062 78063 78064 78065 78066 78069 78070 78073 78074 78101 78107 78108 78109 78111 78112 78113 78114 78115 78116 78117 78118 78119 78121 78122 78123 78124 78130 78131 78132 78133 78135 78140 78141 78143 78144 78147 78148 78150 78151 78152 78154 78155 78156 78159 78160 78161 78163 78164 78201 78202 78203 78204 78205 78206 78207 78208 78209 78210 78211 78212 78213 78214 78215 78216 78217 78218 78219 78220 78221 78222 78223 78224 78225 78226 78227 78228 78229 78230 78231 78232 78233 78234 78235 78236 78237 78238 78239 78240 78241 78242 78243 78244 78245 78246 78247 78248 78249 78250 78251 78252 78253 78254 78255 78256 78257 78258 78259 78260 78261 78262 78263 78264 78265 78266 78268 78269 78270 78275 78278 78279 78280 78283 78284 78285 78286 78287 78288 78289 78291 78292 78293 78294 78295 78296 78297 78298 78299 78603 78604 78614 78618 78623 78624 78629 78631 78632 78638 78658 78670 78671 78675 78677 78801 78802 78827 78828 78829 78830 78832 78833 78834 78836 78837 78838 78839 78840 78841 78842 78843 78847 78850 78852 78853 78860 78861 78870 78871 78872 78873 78877 78879 78880 78881 78883 78884 78885 78886 78959)
THEN iOOS=0;
IF PAT_ZIP_CODE_cc in (76820 76825 76836 76837 76841 76842 76848 76849 76852 76854 76855 76856 76858 76859 76862 76866 76867 76869 76872 76874 76886 76887 76901 76902 76903 76904 76905 76906 76908 76909 76930 76932 76933 76934 76935 76936 76937 76939 76940 76941 76943 76945 76949 76950 76951 76953 76955 76957 76958 78851 79511 79701 79702 79703 79704 79705 79706 79707 79708 79710 79711 79712 79714 79718 79719 79720 79721 79730 79731 79733 79734 79735 79739 79740 79741 79742 79743 79744 79745 79748 79749 79752 79754 79755 79756 79758 79759 79760 79761 79762 79763 79764 79765 79766 79768 79769 79770 79772 79776 79777 797 8 79779 79780 79781 79782 79783 79785 79786 79788 79789 79821 79830 79831 79832 79834 79835 79836 79837 79838 79839 79842 79843 79845 79846 79847 79848 79849 79850 79851 79852 79853 79854 79855 79901 79902 79903 79904 79905 79906 79907 79908 79910 79911 79912 79913 79914 79915 79916 79917 79918 79920 79922 79923 79924 79925 79926 79927 79928 79929 79930 79931 79932 79934 79935 79936 79937 79938 79940 79941 79942 79943 79944 79945 79946 79947 79948 79949 79950 79951 79952 79953 79954 79955 79958 79960 79961 79966 79968 79973 79974 79975 79976 79977 79978 79980 79982 79983 79984 79985 79986 79987 79988 79989 79990 79991 79992 79993 79994 79995 79996 79997 79998 79999 88510 88511 88512 88513 88514 88515 88516 88517 88518 88519 88520 88521 88523 88524 88525 88526 88527 88528 88529 88530 88531 88532 88533 88534 88535 88536 88538 88539 88540 88541 88542 88543 88544 88545 88546 88547 88548 88549 88550 88553 88554 88555 88556 88557 88558 88559 88560 88561 88562 88563 88565 88566 88567 88568 88569 88570 88571 88572 88573 88574 88575 88576 88577 88578 88579 88580 88581 88582 88583 88584 88585 88586 88587 88588 88589 88590 88595)
THEN iOOS=0;
IF PAT_ZIP_CODE_cc in (77363 77950 77990 78007 78022 78040 78041 78042 78043 78044 78045 78046 78049 78060 78067 78071 78072 78075 78076 78102 78104 78125 78142 78145 78146 78162 78330 78332 78333 78335 78336 78338 78339 78340 78341 78342 78343 78344 78347 78349 78350 78351 78352 78353 78355 78357 78358 78359 78360 78361 78362 78363 78364 78368 78369 78370 78371 78372 78373 78374 78375 78376 78377 78379 78380 78381 78382 78383 78384 78385 78387 78389 78390 78391 78393 78401 78402 78403 78404 78405 78406 78407 78408 78409 78410 78411 78412 78413 78414 78415 78416 78417 78418 78419 78426 78427 78460 78461 78463 78465 78466 78467 78468 78469 78470 78471 78472 78473 78474 78475 78476 78477 78478 78480 78501 78502 78503 78504 78505 78516 78520 78521 78522 78523 78526 78535 78536 78537 78538 78539 78540 78541 78542 78543 78545 78547 78548 78549 78550 78551 78552 78553 78557 78558 78559 78560 78561 78562 78563 78564 78565 78566 78567 78568 78569 78570 78572 78573 78574 78575 78576 78577 78578 78579 78580 78582 78583 78584 78585 78586 78588 78589 78590 78591 78592 78593 78594 78595 78596 78597 78598 78599 77523)
THEN iOOS=0;
IF PAT_ZIP_CODE_cc<73001 or PAT_ZIP_CODE_cc>88595 
THEN iOOS=1;
PUT iOOS; 
RUN;

DATA oosnedss4a;
SET oosnedss3;
length OOS $6.;
IF iOOS=0 THEN OOS='TXR'; 
ELSE IF iOOS=1 THEN OOS='OOS';
KEEP _ALL_;
RUN;

DATA oosnedss4b; 
SET oosnedss4a;
length ORDERING_FACILITY_STATE $6.;
IF ORDERING_FACILITY_STATE_CD=48 THEN ORDERING_FACILITY_STATE='TX';
IF (ORDERING_FACILITY_STATE_CD^=48 AND ORDERING_FACILITY_STATE_CD^=.) THEN ORDERING_FACILITY_STATE='Non-TX';
IF PAT_ETHNICITY='2186-5' THEN PAT_ETHNICITY_CALC='Not Hispanic or Latino';
IF PAT_ETHNICITY='2135-2' THEN PAT_ETHNICITY_CALC='Hispanic or Latino';
IF ORDERED_TEST_CD='96603-6' AND Result_Test_Type='NULL' THEN Result_Test_Type='Antibody';
IF ORDERED_TEST_CD='95209-4' AND Result_Test_Type='NULL' THEN Result_Test_Type='Antigen';
IF ORDERED_TEST_CD='97097-0' AND Result_Test_Type='NULL' THEN Result_Test_Type='Antigen';
KEEP _ALL_;
RUN; 

DATA oosnedss4c; 
SET oosnedss4b;
DROP ORDERING_FACILITY_STATE_CD PAT_ETHNICITY;
RUN;

DATA oosnedss4d (KEEP=_ALL_); 
SET oosnedss4c;
RENAME ORDERING_FACILITY_STATE=ORDERING_FACILITY_STATE_CD; 
RENAME PAT_ETHNICITY_CALC=PAT_ETHNICITY;
RUN;

DATA oosnedss4 (KEEP=_ALL_); 
SET oosnedss4d;
WHERE ORDERED_TEST_CD^='T-14900';
RUN;

PROC FREQ DATA=oosnedss4;
TABLES OOS;
RUN;

**********************************************
/*9. CHANGE ZIPCODE FROM CHARACTER TO NUMBERIC FORMAT*/
**********************************************;

DATA oosnedss5 (KEEP=_ALL_); 
SET oosnedss4;
PAT_ZIP_CODE_x = input(PAT_ZIP_CODE, 5.);
DROP PAT_ZIP_CODE;
FORMAT PAT_ZIP_CODE_x 5.;
RUN;

DATA oosnedss6 (KEEP=_ALL_); 
SET oosnedss5;
RENAME PAT_ZIP_CODE_x=PAT_ZIP_CODE;
RUN;

**********************************************
/*10. IDENTIFY TX RESIDENT CASES*/
**********************************************;
PROC SQL;
CREATE TABLE TXR1 AS
SELECT RESULT, ASSOCIATED_CASE_ID, LAB_ADDED_DT, EVENT_DT, PAT_NAME_FIRST, PAT_NAME_LAST, PAT_NAME_MIDDLE, PAT_CURRENT_SEX_CD, PAT_DOB, PAT_ETHNICITY, PAT_RACE_CALC, PAT_ADDRESS_STREET_ONE, PAT_ADDRESS_STREET_TWO, PAT_ADDRESS_CITY, PAT_ADDRESS_COUNTY, PAT_STATE, PAT_ZIP_CODE, PAT_PHONE_NUMBER, PERFORM_FACILITY_NAME, ORDERED_TEST_CD, ORDERED_TEST_DESC, ORDERING_FACILITY_NAME, ORDERING_FACILITY_ADDRESS_ONE, ORDERING_FACILITY_ADDRESS_TWO, ORDERING_FACILITY_CITY, ORDERING_FACILITY_STATE_CD, ORDERING_FACILITY_ZIP_CD, ORDERING_FACILITY_PHONE_NBR, ORDERING_PROVIDER_FIRST_NAME, ORDERING_PROVIDER_LAST_NAME, ORDERING_PROVIDER_CITY, ORDERING_PROVIDER_ZIP_CD, ORDERING_PROVIDER_PHONE_NBR, REPORTING_FACILITY_NAME, REPORTING_FACILITY_CLIA, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_ADDRESS_TWO, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_PHONE_NBR, REPORTING_FACILITY_CITY, REPORTING_FACILITY_STATE_CD, REPORTING_FACILITY_ZIP_CD, Result_Test_Type, RESULTED_TEST_DESC, TEST_METHOD_DESC, SPECIMEN_ID, SPECIMEN_COLL_DT, LAB_REPORT_DT, LAB_UPDATE_DT, SPECIMEN_CD, SPECIMEN_DESC, SPECIMEN_TYPE_FREE_TEXT, RESULT_CATEGORY, RESULT_DESC, LAB_RPT_RECEIVED_BY_PH_DT, ELECTRONIC_IND
FROM oosnedss6
WHERE OOS='TXR' AND PAT_STATE='TX';
QUIT;

PROC SQL;
CREATE TABLE TXR2 AS
SELECT RESULT, ASSOCIATED_CASE_ID, LAB_ADDED_DT, EVENT_DT, PAT_NAME_FIRST, PAT_NAME_LAST, PAT_NAME_MIDDLE, PAT_CURRENT_SEX_CD, PAT_DOB, PAT_ETHNICITY, PAT_RACE_CALC, PAT_ADDRESS_STREET_ONE, PAT_ADDRESS_STREET_TWO, PAT_ADDRESS_CITY, PAT_ADDRESS_COUNTY, PAT_STATE, PAT_ZIP_CODE, PAT_PHONE_NUMBER, PERFORM_FACILITY_NAME, ORDERED_TEST_CD, ORDERED_TEST_DESC, ORDERING_FACILITY_NAME, ORDERING_FACILITY_ADDRESS_ONE, ORDERING_FACILITY_ADDRESS_TWO, ORDERING_FACILITY_CITY, ORDERING_FACILITY_STATE_CD, ORDERING_FACILITY_ZIP_CD, ORDERING_FACILITY_PHONE_NBR, ORDERING_PROVIDER_FIRST_NAME, ORDERING_PROVIDER_LAST_NAME, ORDERING_PROVIDER_CITY, ORDERING_PROVIDER_ZIP_CD, ORDERING_PROVIDER_PHONE_NBR, REPORTING_FACILITY_NAME, REPORTING_FACILITY_CLIA, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_ADDRESS_TWO, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_PHONE_NBR, REPORTING_FACILITY_CITY, REPORTING_FACILITY_STATE_CD, REPORTING_FACILITY_ZIP_CD, Result_Test_Type, RESULTED_TEST_DESC, TEST_METHOD_DESC, SPECIMEN_ID, SPECIMEN_COLL_DT, LAB_REPORT_DT, LAB_UPDATE_DT, SPECIMEN_CD, SPECIMEN_DESC, SPECIMEN_TYPE_FREE_TEXT, RESULT_CATEGORY, RESULT_DESC, LAB_RPT_RECEIVED_BY_PH_DT, ELECTRONIC_IND
FROM oosnedss6
WHERE OOS='OOS' AND PAT_STATE='TX';
QUIT;

PROC SQL;
CREATE TABLE TXR3 AS
SELECT *
FROM TXR1
UNION
SELECT *
FROM TXR2;
QUIT;

PROC SQL;
CREATE TABLE TXR4 AS
SELECT RESULT, ASSOCIATED_CASE_ID, LAB_ADDED_DT, EVENT_DT, PAT_NAME_FIRST, PAT_NAME_LAST, PAT_NAME_MIDDLE, PAT_CURRENT_SEX_CD, PAT_DOB, PAT_ETHNICITY, PAT_RACE_CALC, PAT_ADDRESS_STREET_ONE, PAT_ADDRESS_STREET_TWO, PAT_ADDRESS_CITY, PAT_ADDRESS_COUNTY, PAT_STATE, PAT_ZIP_CODE, PAT_PHONE_NUMBER, PERFORM_FACILITY_NAME, ORDERED_TEST_CD, ORDERED_TEST_DESC, ORDERING_FACILITY_NAME, ORDERING_FACILITY_ADDRESS_ONE, ORDERING_FACILITY_ADDRESS_TWO, ORDERING_FACILITY_CITY, ORDERING_FACILITY_STATE_CD, ORDERING_FACILITY_ZIP_CD, ORDERING_FACILITY_PHONE_NBR, ORDERING_PROVIDER_FIRST_NAME, ORDERING_PROVIDER_LAST_NAME, ORDERING_PROVIDER_CITY, ORDERING_PROVIDER_ZIP_CD, ORDERING_PROVIDER_PHONE_NBR, REPORTING_FACILITY_NAME, REPORTING_FACILITY_CLIA, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_ADDRESS_TWO, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_PHONE_NBR, REPORTING_FACILITY_CITY, REPORTING_FACILITY_STATE_CD, REPORTING_FACILITY_ZIP_CD, Result_Test_Type, RESULTED_TEST_DESC, TEST_METHOD_DESC, SPECIMEN_ID, SPECIMEN_COLL_DT, LAB_REPORT_DT, LAB_UPDATE_DT, SPECIMEN_CD, SPECIMEN_DESC, SPECIMEN_TYPE_FREE_TEXT, RESULT_CATEGORY, RESULT_DESC, LAB_RPT_RECEIVED_BY_PH_DT, ELECTRONIC_IND
FROM oosnedss6
WHERE OOS='OOS' AND (PAT_ADDRESS_COUNTY NOT IN ('Unknown County', '') AND PAT_STATE='' AND PAT_ZIP_CODE IN (99999, 0, .));
QUIT;

PROC SQL;
CREATE TABLE TXR AS
SELECT *
FROM TXR3
UNION
SELECT *
FROM TXR4;
QUIT;

**********************************************
/*10. IDENTIFY OOS CASES*/
**********************************************;
PROC SQL;
CREATE TABLE OOS1 AS
SELECT RESULT, ASSOCIATED_CASE_ID, LAB_ADDED_DT, EVENT_DT, PAT_NAME_FIRST, PAT_NAME_LAST, PAT_NAME_MIDDLE, PAT_CURRENT_SEX_CD, PAT_DOB, PAT_ETHNICITY, PAT_RACE_CALC, PAT_ADDRESS_STREET_ONE, PAT_ADDRESS_STREET_TWO, PAT_ADDRESS_CITY, PAT_ADDRESS_COUNTY, PAT_STATE, PAT_ZIP_CODE, PAT_PHONE_NUMBER, PERFORM_FACILITY_NAME, ORDERED_TEST_CD, ORDERED_TEST_DESC, ORDERING_FACILITY_NAME, ORDERING_FACILITY_ADDRESS_ONE, ORDERING_FACILITY_ADDRESS_TWO, ORDERING_FACILITY_CITY, ORDERING_FACILITY_STATE_CD, ORDERING_FACILITY_ZIP_CD, ORDERING_FACILITY_PHONE_NBR, ORDERING_PROVIDER_FIRST_NAME, ORDERING_PROVIDER_LAST_NAME, ORDERING_PROVIDER_CITY, ORDERING_PROVIDER_ZIP_CD, ORDERING_PROVIDER_PHONE_NBR, REPORTING_FACILITY_NAME, REPORTING_FACILITY_CLIA, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_ADDRESS_TWO, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_PHONE_NBR, REPORTING_FACILITY_CITY, REPORTING_FACILITY_STATE_CD, REPORTING_FACILITY_ZIP_CD, Result_Test_Type, RESULTED_TEST_DESC, TEST_METHOD_DESC, SPECIMEN_ID, SPECIMEN_COLL_DT, LAB_REPORT_DT, LAB_UPDATE_DT, SPECIMEN_CD, SPECIMEN_DESC, SPECIMEN_TYPE_FREE_TEXT, RESULT_CATEGORY, RESULT_DESC, LAB_RPT_RECEIVED_BY_PH_DT, ELECTRONIC_IND
FROM oosnedss6
WHERE OOS='OOS' AND PAT_STATE NOT IN ('TX' '' 'APO' 'AE');
QUIT;

**************************************************************************************;
/*MATCH MERGE - STATE ZIPCODE*/
DATA OOS11 (KEEP=_ALL_);
SET OOS1;
zip=INT(PAT_ZIP_CODE);
state=CATS(PAT_STATE);
county=COMPBL(PAT_ADDRESS_COUNTY);
RUN;

PROC SORT DATA=OOS11 OUT=OOS111; 
BY state zip;
RUN;

PROC SORT DATA=zipcodelu
OUT=zipcodelu1; 
BY state zip;
RUN;

DATA OOS2;
    MERGE zipcodelu1 (in=x) OOS111 (in=y);
    BY state zip;
	IF x and y;	
RUN;

**************************************************************************************;
/*11. MATCH MERGE OOS CASES*/
**************************************************************************************;
/*MATCH MERGE - STATE CITY COUNTY*/
DATA MATCHMERGER1;
    MERGE OOS111 (in=y) zipcodelu1 (in=x);
    BY state zip;
	IF y and decommissioned in (.);	
RUN;


DATA MATCHMERGER2 (DROP=zip type decommissioned primary_city acceptable_cities unacceptable_cities state county timezone area_codes world_region country latitude longitude irs_estimated_population);
SET MATCHMERGER1;
state1=UPCASE(PAT_STATE);
county1=UPCASE(PAT_ADDRESS_COUNTY);
RUN;

PROC SORT DATA=MATCHMERGER2 OUT=MATCHMERGER3; 
BY state1 county1;
RUN;

DATA zipcodelu1 (KEEP=_ALL_);
SET zipcodelu;
state1=UPCASE(state);
county1=UPCASE(county);
RUN;

PROC SORT DATA=zipcodelu1
OUT=zipcodelu2; 
BY state1 county1;
RUN;

DATA MATCHMERGER4;
    MERGE MATCHMERGER3 (in=x) zipcodelu2 (in=y);
    BY state1 county1;
	IF x and y then output;	
RUN;

PROC SORT DATA=MATCHMERGER4
OUT=OOS3
NODUPKEY 
DUPOUT=MATCHMERGERD; 
BY PAT_NAME_FIRST PAT_NAME_LAST PAT_DOB state county;
RUN;

PROC SQL;
CREATE TABLE OOS AS
SELECT RESULT, ASSOCIATED_CASE_ID, LAB_ADDED_DT, EVENT_DT, PAT_NAME_FIRST, PAT_NAME_LAST, PAT_NAME_MIDDLE, PAT_CURRENT_SEX_CD, PAT_DOB, PAT_ETHNICITY, PAT_RACE_CALC, PAT_ADDRESS_STREET_ONE, PAT_ADDRESS_STREET_TWO, PAT_ADDRESS_CITY, PAT_ADDRESS_COUNTY, PAT_STATE, PAT_ZIP_CODE, PAT_PHONE_NUMBER, PERFORM_FACILITY_NAME, ORDERED_TEST_CD, ORDERED_TEST_DESC, ORDERING_FACILITY_NAME, ORDERING_FACILITY_ADDRESS_ONE, ORDERING_FACILITY_ADDRESS_TWO, ORDERING_FACILITY_CITY, ORDERING_FACILITY_STATE_CD, ORDERING_FACILITY_ZIP_CD, ORDERING_FACILITY_PHONE_NBR, ORDERING_PROVIDER_FIRST_NAME, ORDERING_PROVIDER_LAST_NAME, ORDERING_PROVIDER_CITY, ORDERING_PROVIDER_ZIP_CD, ORDERING_PROVIDER_PHONE_NBR, REPORTING_FACILITY_NAME, REPORTING_FACILITY_CLIA, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_ADDRESS_TWO, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_PHONE_NBR, REPORTING_FACILITY_CITY, REPORTING_FACILITY_STATE_CD, REPORTING_FACILITY_ZIP_CD, Result_Test_Type, RESULTED_TEST_DESC, TEST_METHOD_DESC, SPECIMEN_ID, SPECIMEN_COLL_DT, LAB_REPORT_DT, LAB_UPDATE_DT, SPECIMEN_CD, SPECIMEN_DESC, SPECIMEN_TYPE_FREE_TEXT, RESULT_CATEGORY, RESULT_DESC, LAB_RPT_RECEIVED_BY_PH_DT, ELECTRONIC_IND
FROM OOS3
UNION
SELECT RESULT, ASSOCIATED_CASE_ID, LAB_ADDED_DT, EVENT_DT, PAT_NAME_FIRST, PAT_NAME_LAST, PAT_NAME_MIDDLE, PAT_CURRENT_SEX_CD, PAT_DOB, PAT_ETHNICITY, PAT_RACE_CALC, PAT_ADDRESS_STREET_ONE, PAT_ADDRESS_STREET_TWO, PAT_ADDRESS_CITY, PAT_ADDRESS_COUNTY, PAT_STATE, PAT_ZIP_CODE, PAT_PHONE_NUMBER, PERFORM_FACILITY_NAME, ORDERED_TEST_CD, ORDERED_TEST_DESC, ORDERING_FACILITY_NAME, ORDERING_FACILITY_ADDRESS_ONE, ORDERING_FACILITY_ADDRESS_TWO, ORDERING_FACILITY_CITY, ORDERING_FACILITY_STATE_CD, ORDERING_FACILITY_ZIP_CD, ORDERING_FACILITY_PHONE_NBR, ORDERING_PROVIDER_FIRST_NAME, ORDERING_PROVIDER_LAST_NAME, ORDERING_PROVIDER_CITY, ORDERING_PROVIDER_ZIP_CD, ORDERING_PROVIDER_PHONE_NBR, REPORTING_FACILITY_NAME, REPORTING_FACILITY_CLIA, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_ADDRESS_TWO, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_PHONE_NBR, REPORTING_FACILITY_CITY, REPORTING_FACILITY_STATE_CD, REPORTING_FACILITY_ZIP_CD, Result_Test_Type, RESULTED_TEST_DESC, TEST_METHOD_DESC, SPECIMEN_ID, SPECIMEN_COLL_DT, LAB_REPORT_DT, LAB_UPDATE_DT, SPECIMEN_CD, SPECIMEN_DESC, SPECIMEN_TYPE_FREE_TEXT, RESULT_CATEGORY, RESULT_DESC, LAB_RPT_RECEIVED_BY_PH_DT, ELECTRONIC_IND
FROM OOS2;
QUIT;

**************************************************************************************;
/*12. IDENTIFY APO CASES*/
***********************************************************************************;
/*APO*/
PROC SQL;
CREATE TABLE APO AS
SELECT RESULT, ASSOCIATED_CASE_ID, LAB_ADDED_DT, EVENT_DT, PAT_NAME_FIRST, PAT_NAME_LAST, PAT_NAME_MIDDLE, PAT_CURRENT_SEX_CD, PAT_DOB, PAT_ETHNICITY, PAT_RACE_CALC, PAT_ADDRESS_STREET_ONE, PAT_ADDRESS_STREET_TWO, PAT_ADDRESS_CITY, PAT_ADDRESS_COUNTY, PAT_STATE, PAT_ZIP_CODE, PAT_PHONE_NUMBER, PERFORM_FACILITY_NAME, ORDERED_TEST_CD, ORDERED_TEST_DESC, ORDERING_FACILITY_NAME, ORDERING_FACILITY_ADDRESS_ONE, ORDERING_FACILITY_ADDRESS_TWO, ORDERING_FACILITY_CITY, ORDERING_FACILITY_STATE_CD, ORDERING_FACILITY_ZIP_CD, ORDERING_FACILITY_PHONE_NBR, ORDERING_PROVIDER_FIRST_NAME, ORDERING_PROVIDER_LAST_NAME, ORDERING_PROVIDER_CITY, ORDERING_PROVIDER_ZIP_CD, ORDERING_PROVIDER_PHONE_NBR, REPORTING_FACILITY_NAME, REPORTING_FACILITY_CLIA, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_ADDRESS_TWO, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_PHONE_NBR, REPORTING_FACILITY_CITY, REPORTING_FACILITY_STATE_CD, REPORTING_FACILITY_ZIP_CD, Result_Test_Type, RESULTED_TEST_DESC, TEST_METHOD_DESC, SPECIMEN_ID, SPECIMEN_COLL_DT, LAB_REPORT_DT, LAB_UPDATE_DT, SPECIMEN_CD, SPECIMEN_DESC, SPECIMEN_TYPE_FREE_TEXT, RESULT_CATEGORY, RESULT_DESC, LAB_RPT_RECEIVED_BY_PH_DT, ELECTRONIC_IND
FROM oosnedss6
WHERE OOS='OOS' AND PAT_ADDRESS_CITY IN ('APO' 'AE' 'Apo' 'Ae' 'Apo ae' 'DPO' 'Dpo' 'FPO' 'Fpo');
QUIT;

***********************************************************************************;
/*13. IDENTIFY EPI REVIEW CASES*/
***********************************************************************************;
/*EXPORT REMAINING MISMATCH STATE ZIPCODE*/
/*EPIREVIEW*/
DATA EPIREVIEWX;
    MERGE MATCHMERGER3 (in=x) zipcodelu2 (in=y);
    BY state1 county1;
	IF x and decommissioned in (.);	
RUN;

PROC SQL;
CREATE TABLE EPIREVIEW1 AS
SELECT RESULT, ASSOCIATED_CASE_ID, LAB_ADDED_DT, EVENT_DT, PAT_NAME_FIRST, PAT_NAME_LAST, PAT_NAME_MIDDLE, PAT_CURRENT_SEX_CD, PAT_DOB, PAT_ETHNICITY, PAT_RACE_CALC, PAT_ADDRESS_STREET_ONE, PAT_ADDRESS_STREET_TWO, PAT_ADDRESS_CITY, PAT_ADDRESS_COUNTY, PAT_STATE, PAT_ZIP_CODE, PAT_PHONE_NUMBER, PERFORM_FACILITY_NAME, ORDERED_TEST_CD, ORDERED_TEST_DESC, ORDERING_FACILITY_NAME, ORDERING_FACILITY_ADDRESS_ONE, ORDERING_FACILITY_ADDRESS_TWO, ORDERING_FACILITY_CITY, ORDERING_FACILITY_STATE_CD, ORDERING_FACILITY_ZIP_CD, ORDERING_FACILITY_PHONE_NBR, ORDERING_PROVIDER_FIRST_NAME, ORDERING_PROVIDER_LAST_NAME, ORDERING_PROVIDER_CITY, ORDERING_PROVIDER_ZIP_CD, ORDERING_PROVIDER_PHONE_NBR, REPORTING_FACILITY_NAME, REPORTING_FACILITY_CLIA, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_ADDRESS_TWO, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_PHONE_NBR, REPORTING_FACILITY_CITY, REPORTING_FACILITY_STATE_CD, REPORTING_FACILITY_ZIP_CD, Result_Test_Type, RESULTED_TEST_DESC, TEST_METHOD_DESC, SPECIMEN_ID, SPECIMEN_COLL_DT, LAB_REPORT_DT, LAB_UPDATE_DT, SPECIMEN_CD, SPECIMEN_DESC, SPECIMEN_TYPE_FREE_TEXT, RESULT_CATEGORY, RESULT_DESC, LAB_RPT_RECEIVED_BY_PH_DT, ELECTRONIC_IND
FROM oosnedss6
WHERE OOS='TXR' AND PAT_STATE NOT IN ('TX', '');
QUIT;

PROC SQL;
CREATE TABLE EPIREVIEW2 AS
SELECT RESULT, ASSOCIATED_CASE_ID, LAB_ADDED_DT, EVENT_DT, PAT_NAME_FIRST, PAT_NAME_LAST, PAT_NAME_MIDDLE, PAT_CURRENT_SEX_CD, PAT_DOB, PAT_ETHNICITY, PAT_RACE_CALC, PAT_ADDRESS_STREET_ONE, PAT_ADDRESS_STREET_TWO, PAT_ADDRESS_CITY, PAT_ADDRESS_COUNTY, PAT_STATE, PAT_ZIP_CODE, PAT_PHONE_NUMBER, PERFORM_FACILITY_NAME, ORDERED_TEST_CD, ORDERED_TEST_DESC, ORDERING_FACILITY_NAME, ORDERING_FACILITY_ADDRESS_ONE, ORDERING_FACILITY_ADDRESS_TWO, ORDERING_FACILITY_CITY, ORDERING_FACILITY_STATE_CD, ORDERING_FACILITY_ZIP_CD, ORDERING_FACILITY_PHONE_NBR, ORDERING_PROVIDER_FIRST_NAME, ORDERING_PROVIDER_LAST_NAME, ORDERING_PROVIDER_CITY, ORDERING_PROVIDER_ZIP_CD, ORDERING_PROVIDER_PHONE_NBR, REPORTING_FACILITY_NAME, REPORTING_FACILITY_CLIA, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_ADDRESS_TWO, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_PHONE_NBR, REPORTING_FACILITY_CITY, REPORTING_FACILITY_STATE_CD, REPORTING_FACILITY_ZIP_CD, Result_Test_Type, RESULTED_TEST_DESC, TEST_METHOD_DESC, SPECIMEN_ID, SPECIMEN_COLL_DT, LAB_REPORT_DT, LAB_UPDATE_DT, SPECIMEN_CD, SPECIMEN_DESC, SPECIMEN_TYPE_FREE_TEXT, RESULT_CATEGORY, RESULT_DESC, LAB_RPT_RECEIVED_BY_PH_DT, ELECTRONIC_IND
FROM oosnedss6
WHERE OOS='OOS' AND (PAT_ADDRESS_COUNTY NOT IN ('Unknown County', '') AND PAT_STATE='' AND PAT_ZIP_CODE NOT IN (99999, 0, .));
QUIT;

PROC SQL;
CREATE TABLE EPIREVIEW3 AS
SELECT *
FROM EPIREVIEW1
UNION
SELECT *
FROM EPIREVIEW2;
QUIT;

PROC SQL;
CREATE TABLE EPIREVIEW4 AS
SELECT RESULT, ASSOCIATED_CASE_ID, LAB_ADDED_DT, EVENT_DT, PAT_NAME_FIRST, PAT_NAME_LAST, PAT_NAME_MIDDLE, PAT_CURRENT_SEX_CD, PAT_DOB, PAT_ETHNICITY, PAT_RACE_CALC, PAT_ADDRESS_STREET_ONE, PAT_ADDRESS_STREET_TWO, PAT_ADDRESS_CITY, PAT_ADDRESS_COUNTY, PAT_STATE, PAT_ZIP_CODE, PAT_PHONE_NUMBER, PERFORM_FACILITY_NAME, ORDERED_TEST_CD, ORDERED_TEST_DESC, ORDERING_FACILITY_NAME, ORDERING_FACILITY_ADDRESS_ONE, ORDERING_FACILITY_ADDRESS_TWO, ORDERING_FACILITY_CITY, ORDERING_FACILITY_STATE_CD, ORDERING_FACILITY_ZIP_CD, ORDERING_FACILITY_PHONE_NBR, ORDERING_PROVIDER_FIRST_NAME, ORDERING_PROVIDER_LAST_NAME, ORDERING_PROVIDER_CITY, ORDERING_PROVIDER_ZIP_CD, ORDERING_PROVIDER_PHONE_NBR, REPORTING_FACILITY_NAME, REPORTING_FACILITY_CLIA, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_ADDRESS_TWO, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_PHONE_NBR, REPORTING_FACILITY_CITY, REPORTING_FACILITY_STATE_CD, REPORTING_FACILITY_ZIP_CD, Result_Test_Type, RESULTED_TEST_DESC, TEST_METHOD_DESC, SPECIMEN_ID, SPECIMEN_COLL_DT, LAB_REPORT_DT, LAB_UPDATE_DT, SPECIMEN_CD, SPECIMEN_DESC, SPECIMEN_TYPE_FREE_TEXT, RESULT_CATEGORY, RESULT_DESC, LAB_RPT_RECEIVED_BY_PH_DT, ELECTRONIC_IND
FROM oosnedss6
WHERE OOS='OOS' AND (PAT_ADDRESS_COUNTY IN ('Unknown County', '') AND PAT_STATE='' AND PAT_ZIP_CODE NOT IN (99999, 0, .));
QUIT;

PROC SQL;
CREATE TABLE EPIREVIEW5 AS
SELECT *
FROM EPIREVIEW3
UNION
SELECT *
FROM EPIREVIEW4;
QUIT;

PROC SQL;
CREATE TABLE EPIREVIEW6 AS
SELECT RESULT, ASSOCIATED_CASE_ID, LAB_ADDED_DT, EVENT_DT, PAT_NAME_FIRST, PAT_NAME_LAST, PAT_NAME_MIDDLE, PAT_CURRENT_SEX_CD, PAT_DOB, PAT_ETHNICITY, PAT_RACE_CALC, PAT_ADDRESS_STREET_ONE, PAT_ADDRESS_STREET_TWO, PAT_ADDRESS_CITY, PAT_ADDRESS_COUNTY, PAT_STATE, PAT_ZIP_CODE, PAT_PHONE_NUMBER, PERFORM_FACILITY_NAME, ORDERED_TEST_CD, ORDERED_TEST_DESC, ORDERING_FACILITY_NAME, ORDERING_FACILITY_ADDRESS_ONE, ORDERING_FACILITY_ADDRESS_TWO, ORDERING_FACILITY_CITY, ORDERING_FACILITY_STATE_CD, ORDERING_FACILITY_ZIP_CD, ORDERING_FACILITY_PHONE_NBR, ORDERING_PROVIDER_FIRST_NAME, ORDERING_PROVIDER_LAST_NAME, ORDERING_PROVIDER_CITY, ORDERING_PROVIDER_ZIP_CD, ORDERING_PROVIDER_PHONE_NBR, REPORTING_FACILITY_NAME, REPORTING_FACILITY_CLIA, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_ADDRESS_TWO, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_PHONE_NBR, REPORTING_FACILITY_CITY, REPORTING_FACILITY_STATE_CD, REPORTING_FACILITY_ZIP_CD, Result_Test_Type, RESULTED_TEST_DESC, TEST_METHOD_DESC, SPECIMEN_ID, SPECIMEN_COLL_DT, LAB_REPORT_DT, LAB_UPDATE_DT, SPECIMEN_CD, SPECIMEN_DESC, SPECIMEN_TYPE_FREE_TEXT, RESULT_CATEGORY, RESULT_DESC, LAB_RPT_RECEIVED_BY_PH_DT, ELECTRONIC_IND
FROM EPIREVIEWX ;
QUIT;

PROC SQL;
CREATE TABLE EPIREVIEWF AS
SELECT *
FROM EPIREVIEW5
UNION
SELECT *
FROM EPIREVIEW6;
QUIT;

PROC SQL;
CREATE TABLE EPIREVIEW AS
SELECT RESULT, ASSOCIATED_CASE_ID, LAB_ADDED_DT, EVENT_DT, PAT_NAME_FIRST, PAT_NAME_LAST, PAT_NAME_MIDDLE, PAT_CURRENT_SEX_CD, PAT_DOB, PAT_ETHNICITY, PAT_RACE_CALC, PAT_ADDRESS_STREET_ONE, PAT_ADDRESS_STREET_TWO, PAT_ADDRESS_CITY, PAT_ADDRESS_COUNTY, PAT_STATE, PAT_ZIP_CODE, PAT_PHONE_NUMBER, PERFORM_FACILITY_NAME, ORDERED_TEST_CD, ORDERED_TEST_DESC, ORDERING_FACILITY_NAME, ORDERING_FACILITY_ADDRESS_ONE, ORDERING_FACILITY_ADDRESS_TWO, ORDERING_FACILITY_CITY, ORDERING_FACILITY_STATE_CD, ORDERING_FACILITY_ZIP_CD, ORDERING_FACILITY_PHONE_NBR, ORDERING_PROVIDER_FIRST_NAME, ORDERING_PROVIDER_LAST_NAME, ORDERING_PROVIDER_CITY, ORDERING_PROVIDER_ZIP_CD, ORDERING_PROVIDER_PHONE_NBR, REPORTING_FACILITY_NAME, REPORTING_FACILITY_CLIA, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_ADDRESS_TWO, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_PHONE_NBR, REPORTING_FACILITY_CITY, REPORTING_FACILITY_STATE_CD, REPORTING_FACILITY_ZIP_CD, Result_Test_Type, RESULTED_TEST_DESC, TEST_METHOD_DESC, SPECIMEN_ID, SPECIMEN_COLL_DT, LAB_REPORT_DT, LAB_UPDATE_DT, SPECIMEN_CD, SPECIMEN_DESC, SPECIMEN_TYPE_FREE_TEXT, RESULT_CATEGORY, RESULT_DESC, LAB_RPT_RECEIVED_BY_PH_DT, ELECTRONIC_IND
FROM EPIREVIEWF
WHERE PAT_ADDRESS_CITY NOT IN ('APO' 'AE' 'Apo' 'Ae' 'Apo ae' 'DPO' 'Dpo' 'FPO' 'Fpo');
RUN;

***********************************************************************************;
/*14. IDENTIFY UNKNOWN CASES*/
***********************************************************************************;
/*UNKNOWN*/
PROC SQL;
CREATE TABLE UNKNOWN AS
SELECT RESULT, ASSOCIATED_CASE_ID, LAB_ADDED_DT, EVENT_DT, PAT_NAME_FIRST, PAT_NAME_LAST, PAT_NAME_MIDDLE, PAT_CURRENT_SEX_CD, PAT_DOB, PAT_ETHNICITY, PAT_RACE_CALC, PAT_ADDRESS_STREET_ONE, PAT_ADDRESS_STREET_TWO, PAT_ADDRESS_CITY, PAT_ADDRESS_COUNTY, PAT_STATE, PAT_ZIP_CODE, PAT_PHONE_NUMBER, PERFORM_FACILITY_NAME, ORDERED_TEST_CD, ORDERED_TEST_DESC, ORDERING_FACILITY_NAME, ORDERING_FACILITY_ADDRESS_ONE, ORDERING_FACILITY_ADDRESS_TWO, ORDERING_FACILITY_CITY, ORDERING_FACILITY_STATE_CD, ORDERING_FACILITY_ZIP_CD, ORDERING_FACILITY_PHONE_NBR, ORDERING_PROVIDER_FIRST_NAME, ORDERING_PROVIDER_LAST_NAME, ORDERING_PROVIDER_CITY, ORDERING_PROVIDER_ZIP_CD, ORDERING_PROVIDER_PHONE_NBR, REPORTING_FACILITY_NAME, REPORTING_FACILITY_CLIA, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_ADDRESS_TWO, REPORTING_FACILITY_ADDRESS_ONE, REPORTING_FACILITY_PHONE_NBR, REPORTING_FACILITY_CITY, REPORTING_FACILITY_STATE_CD, REPORTING_FACILITY_ZIP_CD, Result_Test_Type, RESULTED_TEST_DESC, TEST_METHOD_DESC, SPECIMEN_ID, SPECIMEN_COLL_DT, LAB_REPORT_DT, LAB_UPDATE_DT, SPECIMEN_CD, SPECIMEN_DESC, SPECIMEN_TYPE_FREE_TEXT, RESULT_CATEGORY, RESULT_DESC, LAB_RPT_RECEIVED_BY_PH_DT, ELECTRONIC_IND
FROM oosnedss6
WHERE OOS='OOS' AND (PAT_ADDRESS_COUNTY IN ('Unknown County', '') AND PAT_STATE='' AND PAT_ZIP_CODE IN (99999, 0, .));
QUIT;

***********************************************************************************;

**********************************************
/*15. EXPORT MASTER AND OOS EXCEL SHEET*/
**********************************************;
/*MASTER_NEDSS_OOS_REPORT*/
PROC EXPORT DATA=OOS
OUTFILE="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&folder/&folder2/&filenameout"
DBMS=xlsx REPLACE;
SHEET='NEDSS OOS';
RUN;

PROC EXPORT DATA=TXR
OUTFILE="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&folder/&folder2/&filenameout"
DBMS=xlsx REPLACE;
SHEET='TX Resident';
RUN;

PROC EXPORT DATA=EPIREVIEW
OUTFILE="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&folder/&folder2/&filenameout"
DBMS=xlsx REPLACE;
SHEET='Epi Review';
RUN;

PROC EXPORT DATA=APO
OUTFILE="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&folder/&folder2/&filenameout"
DBMS=xlsx REPLACE;
SHEET='APO';
RUN;

PROC EXPORT DATA=UNKNOWN
OUTFILE="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&folder/&folder2/&filenameout"
DBMS=xlsx REPLACE;
SHEET='Unknown';
RUN;

/*NEDSS_OOS_REPORT*/
PROC EXPORT DATA=OOS
OUTFILE="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&folder/&folder2/&filenameout2"
DBMS=xlsx REPLACE;
SHEET='NEDSS OOS';
RUN;

PROC EXPORT DATA=EPIREVIEW
OUTFILE="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&folder/&folder2/&filenameout2"
DBMS=xlsx REPLACE;
SHEET='Epi Review';
RUN;

PROC EXPORT DATA=APO
OUTFILE="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&folder/&folder2/&filenameout2"
DBMS=xlsx REPLACE;
SHEET='APO';
RUN;
*EPI-X OOS NEDSS CODES (SPLITTING STATES);

*Author: Ifrah Chaudhary
Modified by: David Kim (Abdullah Mahmood)
**********************************************;
**********************************************;
*1. CHANGE: MACROS TO TODAYS DATE (i.e., ONLY CHANGE DATE IN MACROS);
**********************************************;
%let today=03-31-2025;
%let month=MAR2025;
%let folder1=Outgoing Epi-X Notification Data;
%let folder2=Date 03-31-2025;
**********************************************
2.IMPORT REVIEWED OOS NEDSS REPORT
NOTE: KEEP FILE NAME CONSISTENT
**********************************************;
/*create library name(s)*/

/* Generated Code (IMPORT) */
/* Source File: NEDSS_OOS_REPORT_05242023.xlsx */
/* Source Path: /mnt/viya-share/data/lids-idps/eaidu-coronavirus/_content/Reports/OOS NEDSS Report/2023/MAY2023/Data Pull/NEDSS_OOS_REPORT_05242023.xlsx */
/* Code generated on: May 24, 2023, 10:18:24 AM */

proc sql;
%if %sysfunc(exist(WORK.OOS_NEDSS)) %then %do;
    drop table WORK.OOS_NEDSS;
%end;
%if %sysfunc(exist(WORK.OOS_NEDSS,VIEW)) %then %do;
    drop view WORK.OOS_NEDSS;
%end;
quit;



FILENAME REFFILE DISK '/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/MAR2025/NEDSS_OOS_REPORT/NEDSS_OOS_REPORT_03312025.xlsx';
PROC IMPORT DATAFILE=REFFILE
	DBMS=XLSX
	OUT=WORK.OOS_NEDSS;
	GETNAMES=YES;
RUN;

PROC CONTENTS DATA=WORK.OOS_NEDSS; RUN;

**********************************************
3. SORT THE DATA BY CASE NUMBER AND STATE
**********************************************;

proc sort data=OOS_NEDSS;
by PAT_STATE;
run;

proc sort data=OOS_NEDSS;
by Specimen_ID Pat_State;
run;

**********************************************
4. CHECK FOR UNUSUAL VALUES LISTED IN STATE VARIABLE
EXAMPLE: UNUSUAL STATE ABBREVIATIONS, TX ADDRESS, 
UNKNOWN ADDRESS
**********************************************;

proc freq data=OOS_NEDSS;
tables PAT_STATE;
run;

data OOS_NEDSS2;
set OOS_NEDSS;
RENAME PAT_STATE=PATSTATE;
run;

**********************************************
5. EXPORT SPILIT FILES BY STATE
**********************************************;
/*AL*/

proc export data=OOS_NEDSS (where=(PAT_STATE='AL'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_AL_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*AK*/
proc export data=OOS_NEDSS (where=(PAT_STATE='AK'))
	 outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_AK_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*AR*/
proc export data=OOS_NEDSS (where=(PAT_STATE='AR'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_AR_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*AZ*/
proc export data=OOS_NEDSS (where=(PAT_STATE='AZ'))
	 outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_AZ_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*CA*/
proc export data=OOS_NEDSS (where=(PAT_STATE='CA'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_CA_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*CO*/
proc export data=OOS_NEDSS (where=(PAT_STATE='CO'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_CO_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*CT*/
proc export data=OOS_NEDSS (where=(PAT_STATE='CT'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_CT_&today..xlsx"
     dbms=xlsx  
     replace;
run;

/*DE*/
proc export data=OOS_NEDSS (where=(PAT_STATE='DE'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_DE_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*FL*/
proc export data=OOS_NEDSS (where=(PAT_STATE='FL'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_FL_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*GA*/
proc export data=OOS_NEDSS (where=(PAT_STATE='GA'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_GA_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*HI*/
proc export data=OOS_NEDSS (where=(PAT_STATE='HI'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_HI_&today..xlsx"
     dbms=xlsx  
     replace;
run;

/*ID*/
proc export data=OOS_NEDSS (where=(PAT_STATE='ID'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_ID_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*IL*/
proc export data=OOS_NEDSS (where=(PAT_STATE='IL'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_IL_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*IN*/
proc export data=OOS_NEDSS (where=(PAT_STATE='IN'))
	 outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_IN_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*IA*/
proc export data=OOS_NEDSS (where=(PAT_STATE='IA'))
	 outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_IA_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*KS*/
proc export data=OOS_NEDSS (where=(PAT_STATE='KS'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_KS_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*KY*/
proc export data=OOS_NEDSS (where=(PAT_STATE='KY'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_KY_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*LA*/
proc export data=OOS_NEDSS (where=(PAT_STATE='LA'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_LA_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*ME*/
proc export data=OOS_NEDSS (where=(PAT_STATE='ME'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_ME_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*MD*/
proc export data=OOS_NEDSS (where=(PAT_STATE='MD'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_MD_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*MA*/
proc export data=OOS_NEDSS (where=(PAT_STATE='MA'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_MA_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*MI*/
proc export data=OOS_NEDSS (where=(PAT_STATE='MI'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_MI_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*MN*/
proc export data=OOS_NEDSS (where=(PAT_STATE='MN'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_MN_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*MS*/
proc export data=OOS_NEDSS (where=(PAT_STATE='MS'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_MS_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*MO*/
proc export data=OOS_NEDSS (where=(PAT_STATE='MO'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_MO_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*MT*/
proc export data=OOS_NEDSS (where=(PAT_STATE='MT'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_MT_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*NE*/
proc export data=OOS_NEDSS (where=(PAT_STATE='NE'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_NE_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*NV*/
proc export data=OOS_NEDSS (where=(PAT_STATE='NV'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_NV_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*NH*/
proc export data=OOS_NEDSS (where=(PAT_STATE='NH'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_NH_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*NJ*/
proc export data=OOS_NEDSS (where=(PAT_STATE='NJ'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_NJ_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*NM*/
proc export data=OOS_NEDSS (where=(PAT_STATE='NM'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_NM_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*NY*/
proc export data=OOS_NEDSS (where=(PAT_STATE='NY'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_NY_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*NC*/
proc export data=OOS_NEDSS (where=(PAT_STATE='NC'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_NC_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*ND*/
proc export data=OOS_NEDSS (where=(PAT_STATE='ND'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_ND_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*OH*/
proc export data=OOS_NEDSS (where=(PAT_STATE='OH'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_OH_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*OK*/
proc export data=OOS_NEDSS (where=(PAT_STATE='OK'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_OK_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*OR*/
proc export data=OOS_NEDSS (where=(PAT_STATE='OR'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_OR_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*PA*/
proc export data=OOS_NEDSS (where=(PAT_STATE='PA'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_PA_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*RI*/
proc export data=OOS_NEDSS (where=(PAT_STATE='RI'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_RI_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*SC*/
proc export data=OOS_NEDSS (where=(PAT_STATE='SC'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_SC_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*SD*/
proc export data=OOS_NEDSS (where=(PAT_STATE='SD'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_SD_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*TN*/
proc export data=OOS_NEDSS (where=(PAT_STATE='TN'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_TN_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*UT*/
proc export data=OOS_NEDSS (where=(PAT_STATE='UT'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_UT_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*VT*/
proc export data=OOS_NEDSS (where=(PAT_STATE='VT'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_VT_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*WA*/
proc export data=OOS_NEDSS (where=(PAT_STATE='WA'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_WA_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*WV*/
proc export data=OOS_NEDSS (where=(PAT_STATE='WV'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_WV_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*WI*/
proc export data=OOS_NEDSS (where=(PAT_STATE='WI'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_WI_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*WY*/
proc export data=OOS_NEDSS (where=(PAT_STATE='WY'))
     outfile="/mnt/viya-share/data/lids-idps/eaidu-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_WY_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*DC*/
proc export data=OOS_NEDSS (where=(PAT_STATE='DC'))
     outfile="/mnt/viya-share/data/lids-idps/eaidu-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_DC_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*AS*/
proc export data=OOS_NEDSS (where=(PAT_STATE='AS'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_AS_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*GU*/
proc export data=OOS_NEDSS (where=(PAT_STATE='GU'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_GU_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*MP*/
proc export data=OOS_NEDSS (where=(PAT_STATE='MP'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_MP_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*PR*/
proc export data=OOS_NEDSS (where=(PAT_STATE='PR'))
     outfile="//mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_PR_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*VI*/
proc export data=OOS_NEDSS (where=(PAT_STATE='VI'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_VI_&today..xlsx"
     dbms=xlsx 
     replace;
run;

/*PW*/
Proc export data=OOS_NEDSS (where=(PAT_STATE='PW'))
     outfile="/mnt/viya-share/data/dse/eaid-coronavirus/_content/Reports/OOS NEDSS Report/2025/&month/&folder1/&folder2/Case_Transfer_to_PW_&today..xlsx"
     dbms=xlsx 
     replace;
run;

**********************************************
6. NOTES
**********************************************;

AS=America Samosa
DC=District of Columbia
FM=Federated States of Micronesia
GU=Guam
MH=Marshall Islands
MP= Northern Mariana Islands
MX=Mexico
PR=Puerto Rico
PW=Palau
UM=United States Minor Outlying Islands
VI=U.S. Virgin Islands

